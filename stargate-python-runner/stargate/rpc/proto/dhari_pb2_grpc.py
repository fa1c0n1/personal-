# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from stargate.rpc.proto import dhari_pb2 as dhari__pb2


class DhariProtoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/DhariProtoService/ping',
                request_serializer=dhari__pb2.DhariPing.SerializeToString,
                response_deserializer=dhari__pb2.DhariStatus.FromString,
                )
        self.ingestMarkerJson = channel.unary_unary(
                '/DhariProtoService/ingestMarkerJson',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestJson = channel.unary_unary(
                '/DhariProtoService/ingestJson',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestJsonAsync = channel.unary_unary(
                '/DhariProtoService/ingestJsonAsync',
                request_serializer=dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestPayload = channel.unary_unary(
                '/DhariProtoService/ingestPayload',
                request_serializer=dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
                response_deserializer=dhari__pb2.PayloadResponse.FromString,
                )
        self.ingestPayloadAsync = channel.unary_unary(
                '/DhariProtoService/ingestPayloadAsync',
                request_serializer=dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
                response_deserializer=dhari__pb2.PayloadResponse.FromString,
                )
        self.ingestUnstructuredJson = channel.unary_unary(
                '/DhariProtoService/ingestUnstructuredJson',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestUnstructuredJsonWithHeaders = channel.unary_unary(
                '/DhariProtoService/ingestUnstructuredJsonWithHeaders',
                request_serializer=dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestJsonArray = channel.unary_unary(
                '/DhariProtoService/ingestJsonArray',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestEaiS3 = channel.unary_unary(
                '/DhariProtoService/ingestEaiS3',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestTxnStartJson = channel.unary_unary(
                '/DhariProtoService/ingestTxnStartJson',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.TxnDetails.FromString,
                )
        self.ingestTxnEndJson = channel.unary_unary(
                '/DhariProtoService/ingestTxnEndJson',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestTxnJson = channel.unary_unary(
                '/DhariProtoService/ingestTxnJson',
                request_serializer=dhari__pb2.JsonPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestPipelineJson = channel.unary_unary(
                '/DhariProtoService/ingestPipelineJson',
                request_serializer=dhari__pb2.PipelinePayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.ingestPipelineEaiS3 = channel.unary_unary(
                '/DhariProtoService/ingestPipelineEaiS3',
                request_serializer=dhari__pb2.PipelinePayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.processEAILines = channel.unary_unary(
                '/DhariProtoService/processEAILines',
                request_serializer=dhari__pb2.EAILinesPayload.SerializeToString,
                response_deserializer=dhari__pb2.IngestCount.FromString,
                )
        self.initiateBlockUpload = channel.unary_unary(
                '/DhariProtoService/initiateBlockUpload',
                request_serializer=dhari__pb2.FilePayload.SerializeToString,
                response_deserializer=dhari__pb2.TxnDetails.FromString,
                )
        self.uploadBlock = channel.unary_unary(
                '/DhariProtoService/uploadBlock',
                request_serializer=dhari__pb2.FilePayload.SerializeToString,
                response_deserializer=dhari__pb2.TxnDetails.FromString,
                )
        self.commitBlockUpload = channel.unary_unary(
                '/DhariProtoService/commitBlockUpload',
                request_serializer=dhari__pb2.FilePayload.SerializeToString,
                response_deserializer=dhari__pb2.TxnDetails.FromString,
                )


class DhariProtoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestMarkerJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestJsonAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestPayload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestPayloadAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestUnstructuredJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestUnstructuredJsonWithHeaders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestJsonArray(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestEaiS3(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestTxnStartJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestTxnEndJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestTxnJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestPipelineJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ingestPipelineEaiS3(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def processEAILines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initiateBlockUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commitBlockUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DhariProtoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=dhari__pb2.DhariPing.FromString,
                    response_serializer=dhari__pb2.DhariStatus.SerializeToString,
            ),
            'ingestMarkerJson': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestMarkerJson,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestJson': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestJson,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestJsonAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestJsonAsync,
                    request_deserializer=dhari__pb2.JsonPayloadWithHeaders.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestPayload': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestPayload,
                    request_deserializer=dhari__pb2.JsonPayloadWithHeaders.FromString,
                    response_serializer=dhari__pb2.PayloadResponse.SerializeToString,
            ),
            'ingestPayloadAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestPayloadAsync,
                    request_deserializer=dhari__pb2.JsonPayloadWithHeaders.FromString,
                    response_serializer=dhari__pb2.PayloadResponse.SerializeToString,
            ),
            'ingestUnstructuredJson': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestUnstructuredJson,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestUnstructuredJsonWithHeaders': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestUnstructuredJsonWithHeaders,
                    request_deserializer=dhari__pb2.JsonPayloadWithHeaders.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestJsonArray': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestJsonArray,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestEaiS3': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestEaiS3,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestTxnStartJson': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestTxnStartJson,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.TxnDetails.SerializeToString,
            ),
            'ingestTxnEndJson': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestTxnEndJson,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestTxnJson': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestTxnJson,
                    request_deserializer=dhari__pb2.JsonPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestPipelineJson': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestPipelineJson,
                    request_deserializer=dhari__pb2.PipelinePayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'ingestPipelineEaiS3': grpc.unary_unary_rpc_method_handler(
                    servicer.ingestPipelineEaiS3,
                    request_deserializer=dhari__pb2.PipelinePayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'processEAILines': grpc.unary_unary_rpc_method_handler(
                    servicer.processEAILines,
                    request_deserializer=dhari__pb2.EAILinesPayload.FromString,
                    response_serializer=dhari__pb2.IngestCount.SerializeToString,
            ),
            'initiateBlockUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.initiateBlockUpload,
                    request_deserializer=dhari__pb2.FilePayload.FromString,
                    response_serializer=dhari__pb2.TxnDetails.SerializeToString,
            ),
            'uploadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.uploadBlock,
                    request_deserializer=dhari__pb2.FilePayload.FromString,
                    response_serializer=dhari__pb2.TxnDetails.SerializeToString,
            ),
            'commitBlockUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.commitBlockUpload,
                    request_deserializer=dhari__pb2.FilePayload.FromString,
                    response_serializer=dhari__pb2.TxnDetails.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DhariProtoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DhariProtoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ping',
            dhari__pb2.DhariPing.SerializeToString,
            dhari__pb2.DhariStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestMarkerJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestMarkerJson',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestJson',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestJsonAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestJsonAsync',
            dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestPayload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestPayload',
            dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
            dhari__pb2.PayloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestPayloadAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestPayloadAsync',
            dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
            dhari__pb2.PayloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestUnstructuredJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestUnstructuredJson',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestUnstructuredJsonWithHeaders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestUnstructuredJsonWithHeaders',
            dhari__pb2.JsonPayloadWithHeaders.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestJsonArray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestJsonArray',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestEaiS3(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestEaiS3',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestTxnStartJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestTxnStartJson',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.TxnDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestTxnEndJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestTxnEndJson',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestTxnJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestTxnJson',
            dhari__pb2.JsonPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestPipelineJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestPipelineJson',
            dhari__pb2.PipelinePayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ingestPipelineEaiS3(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/ingestPipelineEaiS3',
            dhari__pb2.PipelinePayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def processEAILines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/processEAILines',
            dhari__pb2.EAILinesPayload.SerializeToString,
            dhari__pb2.IngestCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def initiateBlockUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/initiateBlockUpload',
            dhari__pb2.FilePayload.SerializeToString,
            dhari__pb2.TxnDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def uploadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/uploadBlock',
            dhari__pb2.FilePayload.SerializeToString,
            dhari__pb2.TxnDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commitBlockUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DhariProtoService/commitBlockUpload',
            dhari__pb2.FilePayload.SerializeToString,
            dhari__pb2.TxnDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
