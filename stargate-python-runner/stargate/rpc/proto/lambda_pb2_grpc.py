# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stargate.rpc.proto.lambda_pb2 as lambda__pb2


class ExternalFunctionProtoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.init = channel.unary_unary(
                '/ExternalFunctionProtoService/init',
                request_serializer=lambda__pb2.InitPayload.SerializeToString,
                response_deserializer=lambda__pb2.InitStatus.FromString,
                )
        self.apply = channel.unary_unary(
                '/ExternalFunctionProtoService/apply',
                request_serializer=lambda__pb2.RequestPayload.SerializeToString,
                response_deserializer=lambda__pb2.ResponsePayload.FromString,
                )
        self.metrics = channel.unary_unary(
                '/ExternalFunctionProtoService/metrics',
                request_serializer=lambda__pb2.Epoc.SerializeToString,
                response_deserializer=lambda__pb2.MetricsResponse.FromString,
                )


class ExternalFunctionProtoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def apply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def metrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExternalFunctionProtoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=lambda__pb2.InitPayload.FromString,
                    response_serializer=lambda__pb2.InitStatus.SerializeToString,
            ),
            'apply': grpc.unary_unary_rpc_method_handler(
                    servicer.apply,
                    request_deserializer=lambda__pb2.RequestPayload.FromString,
                    response_serializer=lambda__pb2.ResponsePayload.SerializeToString,
            ),
            'metrics': grpc.unary_unary_rpc_method_handler(
                    servicer.metrics,
                    request_deserializer=lambda__pb2.Epoc.FromString,
                    response_serializer=lambda__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ExternalFunctionProtoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExternalFunctionProtoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExternalFunctionProtoService/init',
            lambda__pb2.InitPayload.SerializeToString,
            lambda__pb2.InitStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def apply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExternalFunctionProtoService/apply',
            lambda__pb2.RequestPayload.SerializeToString,
            lambda__pb2.ResponsePayload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def metrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExternalFunctionProtoService/metrics',
            lambda__pb2.Epoc.SerializeToString,
            lambda__pb2.MetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
