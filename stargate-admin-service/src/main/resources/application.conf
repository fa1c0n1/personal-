server.port = 8080
server.port = ${?APP_SERVER_PORT}
appeng.aluminum.data.mongodb {
  connections {
    stargatedb-reactive {
      instances = ${APP_DB_INSTANCES}
      database = ${APP_DB_NAME}
      user = ${APP_DB_USER}
      password = ${?APP_DB_PASSWORD}
      authDatabase = ${?APP_DB_AUTH_DATABASE}
      driverType = reactive
      readPreference = primaryPreferred
      authMode = X509
      authMode = ${?APP_DB_AUTH_MODE}
      sslMode = CUSTOM
      sslMode = ${?APP_DB_SSL_MODE}
      useSsl = true
      useSsl = ${?APP_DB_SSL_ENABLED}
      ssl {
        enabled = true
        enabled = ${?APP_DB_SSL_ENABLED}
        keyAlias = ${?APP_DB_KEYSTORE_ALIAS}
        keyStore = ${?APP_DB_KEYSTORE_PATH}
        keyStorePassword = ${?APP_DB_KEYSTORE_PASSWORD}
      }
    }
    stargatedb-blocking {
      instances = ${APP_DB_INSTANCES}
      database = ${APP_DB_NAME}
      user = ${APP_DB_USER}
      password = ${?APP_DB_PASSWORD}
      authDatabase = ${?APP_DB_AUTH_DATABASE}
      driverType = blocking
      readPreference = primaryPreferred
      authMode = X509
      authMode = ${?APP_DB_AUTH_MODE}
      sslMode = CUSTOM
      sslMode = ${?APP_DB_SSL_MODE}
      useSsl = true
      useSsl = ${?APP_DB_SSL_ENABLED}
      ssl {
        enabled = true
        enabled = ${?APP_DB_SSL_ENABLED}
        keyAlias = ${?APP_DB_KEYSTORE_ALIAS}
        keyStore = ${?APP_DB_KEYSTORE_PATH}
        keyStorePassword = ${?APP_DB_KEYSTORE_PASSWORD}
      }
    }
  }
}
spring.datasource.configuration.maximum-pool-size = 1000
spring.datasource.configuration.maximum-pool-size = ${?APP_DB_CALCITE_MAX_POOL_SIZE}
spring.datasource.driver-class-name = org.apache.calcite.jdbc.Driver
stargate.calcite.views = [
  {
    viewName = EAI_METADATA
    schemaId = "com.apple.aml.dhari.#{ENV}.eai.file.TriggerMetadata"
    collectionName = checkpoint
    appendClause = "where _MAP['_pipelineId'] = '#{ENV}-creola-trigger' and _MAP['callerAppId'] = 963"
  }
]
stargate.logger.stackTrace {
  print = true
  print = ${?APP_WEB_ERROR_TRACE_PRINT}
  log = false
  log = ${?APP_WEB_ERROR_TRACE_LOG}
}
stargate.schemastore.client.secretKey = ${APP_SCHEMA_STORE_API_TOKEN}
stargate.github.stargateToken = ${?APP_GITHUB_STARGATE_TOKEN}
stargate.defaults {
  logHeadersMapping = {
    "X-Shuri-Tracker-ID" = "tracker_id"
    "X-Shuri-Request-ID" = "client_request_id"
  }
  consumerPollDuration = 30
  kafkaDefaultClientId = "shuri-dhari"
  connectionOptions = {
    callTimeOut = 25s
    connectTimeOut = 15s
    readTimeOut = 10s
    writeTimeOut = 10s
    pingInterval = 30s
  }
}
appeng.aluminum.web.additionalIgnores = [
  "/health",
  "/readiness",
  "/metrics",
  "/version",
  "/favicon.ico",
  "/discovery/grpc",
  "/api/v1/pipeline/state/save/{pipelineId}/{stateId}",
  "/api/v1/pipeline/state/get/{pipelineId}/{stateId}",
  "/api/v1/pipeline/deployment/get/flink/{pipelineId}",
  "/api/v1/pipeline/deployment/get/flink/{pipelineId}/local",
  "/api/v1/pipeline/deployment/templates/flink"
]
LOCAL {
  appeng.aluminum.data.mongodb.connections.stargatedb-reactive.authMode = PLAIN
  appeng.aluminum.data.mongodb.connections.stargatedb-reactive.useSsl = false
  appeng.aluminum.data.mongodb.connections.stargatedb-reactive.ssl.enabled = false
  appeng.aluminum.data.mongodb.connections.stargatedb-blocking.authMode = PLAIN
  appeng.aluminum.data.mongodb.connections.stargatedb-blocking.useSsl = false
  appeng.aluminum.data.mongodb.connections.stargatedb-blocking.ssl.enabled = false
}
application.syncToDatahub = true
dataCatalog.global.mappings="""{
                 "sourceDataSet": {
                     "default_config": {
                       "entityNameRegx": "{PIPELINE_NAME}.{name}.{schemaId}",
                       "yamlMultiParam" : "schemaId",
                       "metaDataMultiParam" : "schemaIds",
                       "schemaId": "schemaId",
                       "type": "type",
                       "config": "config"
                     },
                     "kafka": {
                       "entityNameRegx": "{connectId}.{topic}"
                     },
                     "cassandra": {
                       "entityNameRegx": "{connectId}.{keySpaceName}.{tableName}"
                     },
                     "solr": {
                       "entityNameRegx": "{connectId}.{collection}"
                     }
                   },
                 "dataJob": {
                     "default_config": {
                       "entityNameRegx": "{PIPELINE_NAME}.{name}.{type}.{schemaId}",
                       "yamlMultiParam" : "schemaId",
                       "metaDataMultiParam" : "schemaIds",
                       "schemaId": "schemaId",
                       "type": "type",
                       "config": "config"
                     }
                   },
                 "sinkDataSet": {
                        "default_config": {
                            "entityNameRegx": "{PIPELINE_NAME}.{name}.{schemaId}",
                            "yamlMultiParam" : "schemaId",
                            "metaDataMultiParam" : "schemaIds",
                            "schemaId": "schemaId",
                            "type": "type",
                            "config": "config"
                        },
                        "kafka": {
                            "entityNameRegx": "{connectId}.{topic}"
                        },
                        "cassandra": {
                            "entityNameRegx": "{connectId}.{keySpaceName}.{tableName}"
                        },
                        "solr": {
                            "entityNameRegx": "{connectId}.{collection}"
                        }
                   }
                }"""

dataCatalog.namespace.detail = "stargate"
dataCatalog.entity.description = aml stargate entity
dataCatalog.default.platform = unknown
dataCatalog.datajob.platform.name = stargate
dataCatalog.schema.store.env = PROD
dataCatalog.readers-breakdown-into-datajob-only = ticker
dataCatalog.readers-breakdown-into-dataset-datajob-dataset = kafka
dataCatalog.jdbc.platform.list = """[
  "mysql",
  "sqlserver",
  "db2",
  "postgresql",
  "sqlite",
  "sybase",
  "teradata",
  "informix-sqli",
  "derby",
  "cassandra",
  "couchbase",
  "firebase",
  "h2",
  "hive",
  "impala",
  "mongodb",
  "neo4j",
  "redis",
  "vertica",
  "redshift",
  "phoenix",
  "couch",
  "elasticsearch",
  "influxdb",
  "mariadb",
  "sap",
  "snowflake",
  "spark",
  "ignite",
  "pinot",
  "clickhouse",
  "avatica",
  "greenplum",
  "oracle"
]"""

dataCatalog.dataset.platform.mapping="""{
		"flink" : "DataGenerator,MockData,Data,Sample,SampleData,LoadTest,Sampler,LoadGenerator,NoOp,PassThrough,ByPass,Nothing,None,AsIs,DoNothing,Drop,Drain,JavaFunction,Function,JavaFunc,Lambda,JavaLambda,Java,JavaBiFunction,BiFunction,JavaBiFunc,BiFunc,Error,Errors,ErrorNode,StargateErrors,StargateErrorNode,AllErrors,Exceptions,AllExceptions,SubsetRecord,SubRecord,SubsetRecordExtractor,SubRecordExtractor,EnhanceRecord,AddRecord,RecordEnhancer,ExpandRecord,EnrichRecord",
		"kafka" : "ACIKafka,PIEKafka,Kaffe,Kafka,MSK,Dhari,PublishToKafka,KafkaPublish,DhariPayload,PublishPayload,DhariClient,DhariSDKClient,DhariSDK,AMLSDK,DataPlatformSDK,AMLDP,DP,DhariKafka",
		"s3" : "S3,AWSS3,MINIO",
		"filesystem" : "FileSystem,Local,DiskIO,LocalFS,Disk,File,NoOpFile,NoOpWindow",
		"jdbc" : "Jdbc,Sql,Rdbms",
		"ticker" : "Sequencer,GenerateSequence,Sequence,Sequencer,Trigger,Ticker,Timer,Frequency,Pulse",
		"cassandra" : "PIECassandra,ACICassandra",
		"console" : "Logger,Log,Print,SysOut",
		"splunk" : "Splunk,HEC,SplunkForwarder,FluentD,RawLog,RawSplunk",
		"iceberg" : "Iceberg,ADT,IcebergS3,IcebergHdfs",
		"api" : "Http,Rest,WebService,Post,HttpGet,HttpPost",
		"attributes" : "Attributes,AthenaAttributes,AMLAttributes,Lookups,AthenaLookups,AMLLookups",
		"localofs" : "LocalKVOfs,LocalRelationalOfs,LocalKV,InMemoryOfs,OfsCache",
		"solr" : "Solr,AthenaSolr",
		"python" : "ExternalFunction,External,ExternalFunction,ExternalFunc,ExternalLambda,PythonFunction,PythonFunc,PythonLambda,Python,Jinja,ExternalJvmFunction,ExternalJvmFunc,ExternalJvmLambda,ExternalJvm,ExternalBatchFunction,ExternalBatch,PythonBatchFunction,PythonBatchFunc,PythonBatchLambda,PythonBatch,ExternalJvmBatchFunction,ExternalJvmBatchFunc,ExternalJvmBatchLambda,ExternalJvmBatch",
		"hdfs" : "Hdfs,Hadoop,Hive"
	}"""

stargate.sysaccount {
  name = stargate_platform
  name = ${?APP_SYSACCOUNT_NAME}
  password = ${?APP_SYSACCOUNT_PW}
  secret = ${?APP_SYSACCOUNT_SECRET}
  appIdKey = ${?APP_SYSACCOUNT_APPIDKEY}
  env = PROD
  end = ${?APP_SYSACCOUNT_ENV}
}