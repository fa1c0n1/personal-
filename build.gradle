buildscript {
    dependencies {
        classpath "com.apple.cie.rio:gradle-build-plugin:3.+"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.28.0"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
        classpath "com.apple.amp.amptest:amp-sonarqube-gradle-plugin:0.2.5"
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}
plugins {
    id 'idea'
    id "io.freefair.lombok" version "8.0.1"
    id 'distribution'
    id 'com.google.protobuf' version '0.8.14'
    id 'net.ltgt.errorprone' version "2.0.2"
    id "java"
}

apply plugin: "rio-group"
apply plugin: "org.sonarqube"

allprojects {
    group 'com.apple.aml.stargate'
    artifactory_user = System.getenv('artifactory_user')
    artifactory_password = System.getenv('artifactory_password')
    if (artifactory_user == null || artifactory_user.isBlank()) {
        artifactory_user = "jthebuilder"
    }
    //println "artifactory_user : ${artifactory_user}"
    def artifactory_password_file = file(System.getenv("BUILD_SECRETS_PATH") + "/${artifactory_user}_key")

    if (artifactory_password == null || artifactory_password.isBlank()) {
        //println "artifactory_password is blank. will try to fetch from the secrets"
        if (artifactory_password_file.exists()) {
            artifactory_password = artifactory_password_file.getText()
        }
    }
    repositories {
        if (artifactory_password != null && !artifactory_password.isBlank()) {
            //println "Configuring gradle repositories using user : ${artifactory_user}"
            maven {
                url "https://artifacts.apple.com/libs-release"
                credentials {
                    username = "${artifactory_user}"
                    password = "${artifactory_password}"
                }
                mavenContent {
                    releasesOnly()
                }
            }
            maven {
                url "https://artifacts.apple.com/aml-release"
                credentials {
                    username = "${artifactory_user}"
                    password = "${artifactory_password}"
                }
                mavenContent {
                    releasesOnly()
                }
            }
            maven {
                url "https://artifacts.apple.com/libs-snapshot"
                credentials {
                    username = "${artifactory_user}"
                    password = "${artifactory_password}"
                }
                mavenContent {
                    snapshotsOnly()
                }
            }
            maven {
                url "https://artifacts.apple.com/aml-snapshot"
                credentials {
                    username = "${artifactory_user}"
                    password = "${artifactory_password}"
                }
                mavenContent {
                    snapshotsOnly()
                }
            }
            maven {
                url "https://nexusrepo.corp.apple.com/content/repositories/AML-Athena-Releases"
                credentials {
                    username = "${artifactory_user}"
                    password = "${artifactory_password}"
                }
                mavenContent {
                    releasesOnly()
                }
            }
        } else {
            println "Not overriding any repositories settings"
        }
        maven {
            url "https://linkedin.jfrog.io/artifactory/avro-util/"
        }
        mavenCentral()
    }
}

task sourceJar(type: Jar) {
    archiveClassifier = "sources"
}

sonarqube {
    properties {
        property "sonar.projectName", "AML Shuri Stargate"
        property "sonar.projectKey", "com.apple:aml-shuri-stargate"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.login", "264994d7aa748944441af91495e97ae29a7b0925"
        property "sonar.host.url", "https://sonar.corp.apple.com"
    }
}

//project.tasks["check"].dependsOn -= "sonarqube"
if (gradle.startParameter.taskNames.contains("check") && System.env.SONAR_SCAN == "true") {
    println "Adding sonarqube SCAN at the end of the build"
    gradle.startParameter.taskNames += "sonarqube"
}

subprojects {
    apply plugin: "idea"
    apply plugin: "project-report"
    apply plugin: "checkstyle"
    //apply plugin: "pmd"
//  apply plugin: "jacoco"
    apply plugin: "java"
    //apply plugin: "scala"
    apply plugin: 'distribution'
    apply plugin: 'rio-library'
    apply plugin: "io.freefair.lombok"
//    apply plugin: "net.ltgt.errorprone"


    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
//        options.errorprone {
//            disableWarningsInGeneratedCode = true
//            ignoreUnknownCheckNames = true
//            allErrorsAsWarnings = true
//            errorproneArgs = ['-Xlint:unchecked',
//                              '-Xep:UnusedMethod:OFF',
////                              '-Xep:ParameterName:OFF',
////                              '-Xep:FallThrough:OFF',
////                              '-Xep:FunctionalInterfaceClash:OFF',
////                              '-Xep:AssertionFailureIgnored:OFF',
//                              '-Xlint:deprecation']
//        }
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }

    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
        implementation "com.typesafe:config:${typesafeConfigVersion}"
        testImplementation "org.testng:testng:${testngVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
//        errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    }

    test {
        useTestNG()
        testLogging {
            exceptionFormat 'full'
        }
    }

    idea {
        module {
            downloadSources = true
        }
    }

    checkstyle {
        toolVersion "7.6.1"
    }

    rio {
        library {
            isPublic = true
        }
    }

    checkstyleMain.include("**/**/.java")
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    javadocJar.enabled = false
    test.onlyIf { "true" != System.getenv("skipTests") }

    ext {
        libraries = [beamCompileOnly   : [dependencies.create("org.apache.spark:spark-core_${scalaBaseVersion}:${sparkVersion}") {
            exclude group: "org.apache.hadoop"
            force = true
        },
                                          "org.apache.hadoop:hadoop-client:${hadoopVersion}",
                                          "org.apache.spark:spark-sql_${scalaBaseVersion}:${sparkVersion}",
                                          "org.apache.spark:spark-streaming_${scalaBaseVersion}:${sparkVersion}",
                                          "org.apache.spark:spark-streaming-kafka-0-10_${scalaBaseVersion}:${sparkVersion}",],
                     beamImplementation: ["org.apache.beam:beam-sdks-java-core:${beamVersion}",
                                          "org.apache.beam:beam-sdks-java-extensions-avro:${beamVersion}",
                                          "org.apache.beam:beam-runners-direct-java:${beamVersion}",],
                     logback           : ["ch.qos.logback:logback-classic:${logbackVersion}",
                                          "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
                                          "org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}",],
                     log4j2            : ["org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}",
                                          "org.apache.logging.log4j:log4j-core:${log4jVersion}",
                                          "org.apache.logging.log4j:log4j-jul:${log4jVersion}",
                                          "org.slf4j:jul-to-slf4j:${slf4jVersion}",],
                     logbackLatest     : ["ch.qos.logback:logback-classic:1.3.0-alpha6",
                                          "org.slf4j:log4j-over-slf4j:2.0.0-alpha2",
                                          "org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}",],
                     coreJackson       : ["com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                                          "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}",
                                          "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jacksonVersion}",
                                          "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}",
                                          "com.fasterxml.jackson.dataformat:jackson-dataformat-avro:${jacksonVersion}",
                                          "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:${jacksonVersion}",
                                          "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}",
                                          "com.fasterxml.jackson.module:jackson-module-paranamer:${jacksonVersion}",
                                          "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}",
                                          "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}",
                                          "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",],
                     iceberg           : ["org.apache.iceberg:iceberg-core:${icebergVersion}",
                                          "org.apache.iceberg:iceberg-parquet:${icebergVersion}",
                                          "org.apache.iceberg:iceberg-orc:${icebergVersion}",
                                          "org.apache.iceberg:iceberg-data:${icebergVersion}",
                                          "org.apache.iceberg:iceberg-hive-metastore:${icebergVersion}",
                                          "org.apache.iceberg:iceberg-aws:${icebergVersion}",],
                     icebergSpark      : ["org.apache.iceberg:iceberg-spark:${icebergVersion}",
//                        "org.apache.iceberg:iceberg-spark3:${icebergVersion}",
//                        "org.apache.iceberg:iceberg-spark3-runtime:${icebergVersion}",
                     ],
                     amlDataplatformSdk: ["com.apple.aml:aml-dataplatform-java-sdk:${adpVersion}"]]
    }
}
